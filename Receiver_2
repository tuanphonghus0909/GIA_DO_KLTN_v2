#include <esp_now.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <SPI.h>

// ====== TFT PINS ======
#define TFT_CS     2
#define TFT_RST    5
#define TFT_DC     4
#define TFT_BL     22
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
#define SCREEN_W   160
#define SCREEN_H   128

// ====== RGB LED PINS ======
#define LED_RED    27
#define LED_GREEN  26
#define LED_BLUE   25
#define PWM_FREQ   5000
#define PWM_RES    8
#define RED_CH     0
#define GREEN_CH   1
#define BLUE_CH    2

// ====== TOUCH SENSOR PIN ======
#define TOUCH_PIN 32
#define TOUCH_THRESHOLD 40

// ====== UART2 CONFIG ======
#define UART2_BAUD 2000000
#define UART2_TX   17
#define UART2_RX   16

// ====== SENDER MAC ADDRESSES (ESP32-C3) ======
uint8_t senderAddresses[][6] = {
  {0xDC, 0x06, 0x75, 0x67, 0x67, 0xE0}, // Node 1
  {0xDC, 0x06, 0x75, 0x67, 0x77, 0xFC}, // Node 2
  {0xDC, 0x06, 0x75, 0x69, 0x54, 0xD4}, // Node 3
  {0xA0, 0xB1, 0xC2, 0xD3, 0xE4, 0xF5}  // Node 4
};
const int NUM_SENDERS = 4;

// ====== BROADCAST MAC FOR SYNC BEACON ======
uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

// ====== SECURITY KEYS ======
const uint8_t PMK_KEY[16] = {'p', 'm', 'k', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3'};
const uint8_t LMK_KEY[16] = {'l', 'm', 'k', '_', 's', 'h', 'a', 'r', 'e', 'd', '_', '1', '2', '3', '4', '5'}; // Shared LMK for all nodes

// ====== TDMA CONFIG ======
#define TDMA_THRESHOLD 6 // Adjusted to match NUM_SENDERS
#define CYCLE_DURATION 12000
#define SLOT_DURATION 2000
#define SYNC_INTERVAL 300000

// ====== TABLE CONFIG ======
#define ROW_HEIGHT 32
#define COL_NODE   40
#define COL_ROLL   38
#define COL_PITCH  38
#define COL_BATT   44

// ====== DATA STRUCTURE ======
typedef struct struct_message {
  char a[32];
  float roll; // Single average roll value
  float pitch; // Single average pitch value
  bool reset;
  float battery_percentage;
} struct_message;

typedef struct sync_message {
  uint32_t timestamp;
  uint32_t cycle_start;
  uint8_t num_nodes;
} sync_message;

struct_message incomingData;
struct_message resetMessage;
sync_message syncMsg;
struct_message nodeData[NUM_SENDERS];

// ====== NODE TRACKING ======
bool nodeActive[NUM_SENDERS] = {false};
unsigned long lastNodeTime[NUM_SENDERS] = {0};
const unsigned long NODE_TIMEOUT = 60000;

// ====== TFT COLORS ======
#define BLACK      0x0000
#define WHITE      0xFFFF
#define RED        0xF800
#define GREEN      0x07E0
#define YELLOW     0xFFE0
#define CYAN       0x07FF // Cyan color for Node column

// ====== INITIALIZE TFT ======
void initTFT() {
  pinMode(TFT_BL, OUTPUT);
  digitalWrite(TFT_BL, HIGH);
  tft.initR(INITR_BLACKTAB);
  SPI.setFrequency(12000000);
  tft.setRotation(1);
  tft.fillScreen(BLACK);

  // Draw table grid
  tft.drawFastHLine(0, 0, SCREEN_W, WHITE);
  for (int i = 0; i <= 4; i++) {
    tft.drawFastHLine(0, i * ROW_HEIGHT, SCREEN_W, WHITE);
  }
  int xPos[] = {0, COL_NODE, COL_NODE + COL_ROLL, COL_NODE + COL_ROLL + COL_PITCH, SCREEN_W};
  for (int x : xPos) {
    tft.drawFastVLine(x, 0, SCREEN_H, WHITE);
  }

  // Draw header
  tft.setTextColor(CYAN); // Cyan for "Node" header
  tft.setTextSize(1);
  tft.setCursor(5, 12);
  tft.println("Node");
  tft.setTextColor(WHITE); // White for other headers
  tft.setCursor(COL_NODE + 5, 12);
  tft.println("Roll");
  tft.setCursor(COL_NODE + COL_ROLL + 5, 12);
  tft.println("Pitch");
  tft.setCursor(COL_NODE + COL_ROLL + COL_PITCH + 5, 12);
  tft.println("Batt");

  // Initialize node rows (only for nodes 1-3)
  for (int i = 0; i < 3; i++) {
    updateTFT(i);
  }
}

// ====== DRAW BATTERY ICON ======
void drawBatteryIcon(int x, int y, float percentage) {
  tft.fillRect(x, y, 16, 6, BLACK);
  uint16_t color = percentage > 70 ? GREEN : (percentage >= 30 ? YELLOW : RED);
  tft.drawRect(x, y, 14, 6, WHITE);
  tft.fillRect(x + 14, y + 2, 2, 2, WHITE);
  int fillWidth = (int)(12 * (percentage / 100.0));
  if (fillWidth > 0) {
    tft.fillRect(x + 1, y + 1, fillWidth, 4, color);
  }
}

// ====== UPDATE TFT FOR A NODE (ONLY NODES 1-3) ======
void updateTFT(int nodeIdx) {
  if (nodeIdx >= 3) return; // Only display nodes 1-3
  int yBase = (nodeIdx + 1) * ROW_HEIGHT;
  // Clear row (except grid lines)
  tft.fillRect(1, yBase + 1, COL_NODE - 1, ROW_HEIGHT - 1, BLACK);
  tft.fillRect(COL_NODE + 1, yBase + 1, COL_ROLL - 1, ROW_HEIGHT - 1, BLACK);
  tft.fillRect(COL_NODE + COL_ROLL + 1, yBase + 1, COL_PITCH - 1, ROW_HEIGHT - 1, BLACK);
  tft.fillRect(COL_NODE + COL_ROLL + COL_PITCH + 1, yBase + 1, COL_BATT - 1, ROW_HEIGHT - 1, BLACK);

  // Node label in cyan
  tft.setTextColor(CYAN);
  tft.setTextSize(1);
  tft.setCursor(5, yBase + 12);
  tft.printf("Node%d", nodeIdx + 1);

  if (!nodeActive[nodeIdx]) {
    tft.setTextColor(WHITE);
    tft.setCursor(COL_NODE + 5, yBase + 12);
    tft.println("---");
    tft.setCursor(COL_NODE + COL_ROLL + 5, yBase + 12);
    tft.println("---");
    tft.setCursor(COL_NODE + COL_ROLL + COL_PITCH + 10, yBase + 16);
    tft.println("0.0%");
    drawBatteryIcon(COL_NODE + COL_ROLL + COL_PITCH + 10, yBase + 8, 0);
    return;
  }

  // Display average roll and pitch
  tft.setTextColor(WHITE);
  tft.setTextSize(1);
  tft.setCursor(COL_NODE + 2, yBase + 12);
  tft.printf("%+.2f\xF8", nodeData[nodeIdx].roll);
  tft.setCursor(COL_NODE + COL_ROLL + 2, yBase + 12);
  tft.printf("%+.2f\xF8", nodeData[nodeIdx].pitch);

  // Display battery
  drawBatteryIcon(COL_NODE + COL_ROLL + COL_PITCH + 10, yBase + 8, nodeData[nodeIdx].battery_percentage);
  tft.setCursor(COL_NODE + COL_ROLL + COL_PITCH + 10, yBase + 16);
  tft.printf("%.1f%%", nodeData[nodeIdx].battery_percentage);
}

// ====== INITIALIZE RGB LED ======
void initRGB() {
  ledcSetup(RED_CH, PWM_FREQ, PWM_RES);
  ledcSetup(GREEN_CH, PWM_FREQ, PWM_RES);
  ledcSetup(BLUE_CH, PWM_FREQ, PWM_RES);
  ledcAttachPin(LED_RED, RED_CH);
  ledcAttachPin(LED_GREEN, GREEN_CH);
  ledcAttachPin(LED_BLUE, BLUE_CH);
  ledcWrite(RED_CH, 255);
  ledcWrite(GREEN_CH, 255);
  ledcWrite(BLUE_CH, 255);
}

// ====== SET RGB COLOR ======
void setRGBColor(uint8_t r, uint8_t g, uint8_t b) {
  ledcWrite(RED_CH, 255 - r);
  ledcWrite(GREEN_CH, 255 - g);
  ledcWrite(BLUE_CH, 255 - b);
}

// ====== UPDATE RGB LED ======
void updateRGB() {
  bool redCondition = false, yellowCondition = false;
  for (int i = 0; i < NUM_SENDERS; i++) {
    if (!nodeActive[i]) continue;
    float maxVal = max(fabs(nodeData[i].roll), fabs(nodeData[i].pitch));
    if (i == 2) { // Node 3
      if (maxVal >= 20) redCondition = true;
      else if (maxVal >= 10) yellowCondition = true;
    } else { // Nodes 1, 2, 4
      if (maxVal >= 10) redCondition = true;
      else if (maxVal >= 5) yellowCondition = true;
    }
  }
  if (redCondition) {
    setRGBColor(255, 0, 0);
  } else if (yellowCondition) {
    setRGBColor(255, 255, 0);
  } else {
    setRGBColor(0, 255, 0);
  }
}

// ====== SEND DATA VIA UART2 (NODES 1-3) ======
void sendUART2Data(int nodeIdx) {
  if (nodeIdx >= 3) return; // Only send data for nodes 1-3
  if (nodeActive[nodeIdx]) {
    char buffer[64];
    snprintf(buffer, sizeof(buffer), "Node%d: Roll=%.2f, Pitch=%.2f, Batt=%.1f%%\n",
             nodeIdx + 1, nodeData[nodeIdx].roll, nodeData[nodeIdx].pitch, nodeData[nodeIdx].battery_percentage);
    Serial2.print(buffer);
  }
}

// ====== CALLBACK FOR DATA RECEIVED ======
void OnDataRecv(const uint8_t *mac, const uint8_t *data, int len) {
  Serial.println("Packet received!");
  if (len == sizeof(incomingData)) {
    memcpy(&incomingData, data, sizeof(incomingData));
    int nodeIdx = -1;
    for (int i = 0; i < NUM_SENDERS; i++) {
      if (memcmp(mac, senderAddresses[i], 6) == 0) {
        nodeIdx = i;
        nodeActive[i] = true;
        lastNodeTime[i] = millis();
        memcpy(&nodeData[i], &incomingData, sizeof(incomingData));
        break;
      }
    }
    if (nodeIdx == -1) return;
    if (incomingData.reset) {
      Serial.println("ðŸ“¥ Received RESET command");
    } else {
      Serial.println("ðŸ“¥ Received MPU6050 data:");
      Serial.print("  Source: "); Serial.println(incomingData.a);
      Serial.print("  Roll: "); Serial.print(incomingData.roll); Serial.println(" deg");
      Serial.print("  Pitch: "); Serial.print(incomingData.pitch); Serial.println(" deg");
      Serial.print("  Battery: "); Serial.print(incomingData.battery_percentage); Serial.println("%");
    }
    Serial.print("  From MAC: ");
    for (int i = 0; i < 6; i++) {
      Serial.printf("%02X", mac[i]);
      if (i < 5) Serial.print(":");
    }
    Serial.println("\n-----------------------------");
    if (countActiveNodes() == TDMA_THRESHOLD) {
      // TDMA mode: Ensure data is received in correct slot
      unsigned long currentTime = millis();
      unsigned long cycleTime = currentTime % CYCLE_DURATION;
      int expectedSlot = nodeIdx * SLOT_DURATION;
      if (cycleTime >= expectedSlot && cycleTime < expectedSlot + SLOT_DURATION) {
        updateTFT(nodeIdx);
        sendUART2Data(nodeIdx);
      }
    } else {
      // Normal ESP-NOW mode
      updateTFT(nodeIdx);
      sendUART2Data(nodeIdx);
    }
    updateRGB();
  } else {
    Serial.println("Invalid packet size!");
  }
}

// ====== CALLBACK FOR DATA SENT ======
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Send Status to ");
  for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", mac_addr[i]);
    if (i < 5) Serial.print(":");
  }
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? ": Success" : ": Fail");
}

// ====== COUNT ACTIVE NODES ======
uint8_t countActiveNodes() {
  uint8_t count = 0;
  unsigned long currentTime = millis();
  for (int i = 0; i < NUM_SENDERS; i++) {
    if (nodeActive[i] && (currentTime - lastNodeTime[i] < NODE_TIMEOUT)) {
      count++;
    } else {
      nodeActive[i] = false;
      if (i < 3) updateTFT(i); // Update TFT for nodes 1-3 only
    }
  }
  return count;
}

// ====== SEND SYNC BEACON ======
void sendSyncBeacon() {
  syncMsg.timestamp = millis();
  syncMsg.cycle_start = syncMsg.timestamp - (syncMsg.timestamp % CYCLE_DURATION);
  syncMsg.num_nodes = countActiveNodes();
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&syncMsg, sizeof(syncMsg));
  Serial.print("Sent sync beacon, num_nodes: ");
  Serial.print(syncMsg.num_nodes);
  Serial.print(" (Result: ");
  Serial.print(result == ESP_OK ? "OK" : "Error");
  Serial.println(")");
  updateRGB();
}

// ====== SEND RESET TO ALL SENDERS ======
void sendResetToAll() {
  for (int i = 0; i < NUM_SENDERS; i++) {
    Serial.println("Sending RESET to Node " + String(i + 1));
    esp_err_t result = esp_now_send(senderAddresses[i], (uint8_t *)&resetMessage, sizeof(resetMessage));
    Serial.print("Sending RESET to ");
    for (int j = 0; j < 6; j++) {
      Serial.printf("%02X", senderAddresses[i][j]);
      if (j < 5) Serial.print(":");
    }
    Serial.print(" (Result: ");
    Serial.print(result == ESP_OK ? "OK" : "Error");
    Serial.println(")");
  }
}

void setup() {
  Serial.begin(115200);
  Serial2.begin(UART2_BAUD, SERIAL_8N1, UART2_RX, UART2_TX);
  delay(1000);

  Serial.println("ESP32 Touch Test");
  Serial.println("ESP32-WROOM Receiver MAC: " + WiFi.macAddress());

  initTFT();
  initRGB();

  WiFi.mode(WIFI_STA);
  esp_wifi_start();
  WiFi.disconnect();

  int channel = 1;
  esp_wifi_set_channel(channel, WIFI_SECOND_CHAN_NONE);
  Serial.print("Wi-Fi Channel: ");
  Serial.println(channel);

  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW init failed");
    while (1);
  }
  Serial.println("ESP-NOW initialized successfully");

  if (esp_now_set_pmk(PMK_KEY) != ESP_OK) {
    Serial.println("Failed to set PMK");
    while (1);
  }

  esp_now_register_recv_cb(OnDataRecv);
  esp_now_register_send_cb(OnDataSent);
  Serial.println("Callbacks registered");

  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = channel;
  peerInfo.encrypt = false;
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add broadcast peer");
    while (1);
  }

  for (int i = 0; i < NUM_SENDERS; i++) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, senderAddresses[i], 6);
    peerInfo.channel = channel;
    peerInfo.encrypt = true;
    memcpy(peerInfo.lmk, LMK_KEY, 16); // Use shared LMK for all nodes
    if (esp_now_add_peer(&peerInfo) != ESP_OK) {
      Serial.println("Failed to add peer for Node " + String(i + 1));
      while (1);
    }
    Serial.println("Peer added for Node " + String(i + 1) + " with encryption");
  }

  strcpy(resetMessage.a, "RESET");
  resetMessage.roll = 0.0;
  resetMessage.pitch = 0.0;
  resetMessage.reset = true;
  resetMessage.battery_percentage = 0.0;

  for (int i = 0; i < NUM_SENDERS; i++) {
    strcpy(nodeData[i].a, "");
    nodeData[i].roll = 0.0;
    nodeData[i].pitch = 0.0;
    nodeData[i].reset = false;
    nodeData[i].battery_percentage = 0.0;
  }
}

void loop() {
  static unsigned long lastSyncTime = 0;
  unsigned long currentTime = millis();

  if (currentTime - lastSyncTime >= SYNC_INTERVAL) {
    sendSyncBeacon();
    lastSyncTime = currentTime;
  }

  int touchValue = touchRead(TOUCH_PIN);
  if (touchValue < TOUCH_THRESHOLD) {
    Serial.println("Touch detected, sending RESET to all nodes");
    sendResetToAll();
    delay(1000);
  }

  if (Serial2.available()) {
    String received = Serial2.readStringUntil('\n');
    received.trim();
    if (received == "reset") {
      Serial.println("Received from C3: reset");
      sendResetToAll();
      delay(1000);
    }
  }

  delay(10);
}
